

Obliczenia ułamków w C++

Default (GPT-3.5)

User
#include <iostream>
 
void farey(int n)
{
    typedef struct { int d, n; } frac;
    frac f1 = {0, 1}, f2 = {1, n}, t;
    int k;
 
    std::cout << "0/1 1/" << n;
    while (f2.n > 1) {
        k = (n + f1.n) / f2.n;
        t = f1, f1 = f2, f2 = { f2.d * k - t.d, f2.n * k - t.n };
        std::cout << " " << f2.d << "/" << f2.n;
    }
 
    std::cout << std::endl;
}
 
int main()
{
    int n;
 
    do {
        std::cout << "Podaj liczbę (nie większą niż 12): ";
        std::cin >> n;
 
        if (n > 12) {
            std::cout << "Liczba nie może być większa od 12.\n";
        }
    } while (n > 12);
 
    for (int i = 1; i <= n; i++) {
        farey(i);
    }
 
    return 0;
}
Zrób w tej void farey jaśniejsze oznaczenia rozpisz mi jak tam się wykonują obilczenia bo nie umiem 

ChatGPT
Oczywiście, rozpisać kod farey w bardziej czytelny sposób:

cpp
Copy code
#include <iostream>

// Struktura do przechowywania ułamków
struct Fraction {
    int numerator;   // Licznik
    int denominator; // Mianownik
};

// Funkcja do obliczania i wypisywania ułamków Fareya
void farey(int n) {
    Fraction f1 = {0, 1};    // Pierwszy ułamek
    Fraction f2 = {1, n};    // Drugi ułamek
    Fraction temp;           // Zmienna tymczasowa do przechowywania ułamka pośredniego
    int k;                   // Współczynnik k

    std::cout << "0/1 1/" << n; // Wypisanie początkowych ułamków

    while (f2.denominator > 1) {
        k = (n + f1.denominator) / f2.denominator; // Obliczenie współczynnika k
        temp = f1;                                // Przypisanie f1 do zmiennej tymczasowej
        f1 = f2;                                  // Przypisanie f2 do f1
        f2.numerator = f2.numerator * k - temp.numerator; // Obliczenie nowego licznika f2
        f2.denominator = f2.denominator * k - temp.denominator; // Obliczenie nowego mianownika f2

        std::cout << " " << f2.numerator << "/" << f2.denominator; // Wypisanie obliczonego ułamka
    }

    std::cout << std::endl; // Zakończenie linii
}

int main() {
    int n;

    do {
        std::cout << "Podaj liczbę (nie większą niż 12): ";
        std::cin >> n;

        if (n > 12) {
            std::cout << "Liczba nie może być większa od 12.\n";
        }
    } while (n > 12);

    for (int i = 1; i <= n; i++) {
        farey(i); // Wywołanie funkcji farey dla kolejnych n
    }

    return 0;
}
W powyższym kodzie, użyłem struktury Fraction do przechowywania ułamków, co sprawia, że kod jest bardziej czytelny. Zmienne numerator i denominator odzwierciedlają licznik i mianownik ułamka. Oszczędza to czas na analizie, co oznaczają f1 i f2. Dodatkowo, komentarze wyjaśniają, co robią poszczególne kroki w funkcji farey.




User
Po co jest zmienna tymczasowa?

ChatGPT
Zmienna tymczasowa (w tym przypadku temp) jest używana do przechowywania jednego z ułamków tymczasowo, aby można było dokonać zamiany dwóch ułamków (f1 i f2) w trakcie obliczeń.

W algorytmie Fareya używa się współczynnika k, aby znaleźć kolejny ułamek w sekwencji. Wykorzystuje się go do obliczenia nowego ułamka f2 na podstawie f1 i k. Wartości f1 muszą zostać zachowane, aby później obliczyć f2, ale f2 zostaje nadpisane nowymi wartościami.

Zmienna temp służy do przechowywania f1 przed nadpisaniem przez f2. Po obliczeniach, kiedy już obliczony zostaje nowy f2, możemy wykorzystać temp, aby przywrócić poprzednie wartości f1 i kontynuować obliczenia. Bez zmiennej tymczasowej trudno byłoby zachować poprzednie wartości f1 po nadpisaniu ich przez nowe wartości f2. Dlatego używa się zmiennej temp, aby zachować spójność obliczeń w algorytmie.




User
Co to współczynnik k

ChatGPT
Współczynnik k w algorytmie Fareya jest używany do wyznaczenia kolejnego ułamka w sekwencji ułamków Fareya. Oto jak jest obliczany i wykorzystywany:

Na początku algorytmu, mamy dwa ułamki: f1 i f2, gdzie f1 ma licznik 0 i mianownik 1, a f2 ma licznik 1 i mianownik n.

W każdej iteracji algorytmu obliczamy k za pomocą wzoru:

makefile
Copy code
k = (n + f1.n) / f2.n
Gdzie n to wartość, którą podał użytkownik, f1.n to mianownik ułamka f1, a f2.n to mianownik ułamka f2.

Następnie używamy wartości k, aby obliczyć nowy ułamek f2 w następujący sposób:

makefile
Copy code
f2 = { f2.d * k - f1.d, f2.n * k - f1.n }
Gdzie f2.d i f2.n to odpowiednio licznik i mianownik ułamka f2, a f1.d i f1.n to odpowiednio licznik i mianownik ułamka f1.

Ułamek f2 staje się nowym ułamkiem, a f1 zostaje zaktualizowany na podstawie wartości starego f2.

Współczynnik k jest kluczowym elementem, który pozwala na obliczanie kolejnych ułamków w sekwencji Fareya. Jego wartość jest obliczana na podstawie mianowników ułamków f1 i f2, i pozwala na równomierną "dzielność" przedziałów pomiędzy nimi, co jest charakterystyczne dla sekwencji Fareya.




User
Rozpisz mi jeszcze raz jak oblicza się te ulamki w wpis farey tylko krok po kroku jasno bo nie rozumiem 

ChatGPT
Oczywiście, rozpisać obliczenia krok po kroku w funkcji farey:

Zakładając, że mamy początkowe ułamki f1 i f2, gdzie:

f1 ma licznik (numerator) 0 i mianownik (denominator) 1.
f2 ma licznik 1 i mianownik n, gdzie n to wartość, którą użytkownik podał.
Rozpoczynamy od wypisania początkowych ułamków:

c
Copy code
std::cout << "0/1 1/" << n;
Następnie wchodzimy do pętli while, która będzie się powtarzać, dopóki mianownik ułamka f2 jest większy niż 1.

Wewnątrz pętli obliczamy współczynnik k:

makefile
Copy code
k = (n + f1.denominator) / f2.denominator;
k to wynik dzielenia sumy n i mianownika ułamka f1 przez mianownik ułamka f2.

Teraz obliczamy nowy ułamek f2 na podstawie współczynnika k:

Copy code
f2.numerator = f2.numerator * k - f1.numerator;
f2.denominator = f2.denominator * k - f1.denominator;
Nowy licznik f2 to różnica iloczynu starego licznika f2 i k oraz starego licznika f1. Nowy mianownik f2 to różnica iloczynu starego mianownika f2 i k oraz starego mianownika f1.

Teraz mamy obliczony nowy ułamek f2. Możemy wypisać ten ułamek:

c
Copy code
std::cout << " " << f2.numerator << "/" << f2.denominator;
Pętla while będzie kontynuować obliczenia dla kolejnych ułamków f1 i f2, aż mianownik ułamka f2 stanie się równy 1. Wtedy pętla się zakończy.

Na koniec program wypisuje nową linię:

c
Copy code
std::cout << std::endl;
To jest ogólny sposób, w jaki algorytm Fareya oblicza i wypisuje ułamki w sekwencji. Warto zwrócić uwagę, że algorytm ten generuje ułamki w sekwencji Fareya aż do momentu, gdy mianownik ułamka f2 staje się równy 1, a następnie przechodzi do kolejnych wartości n, aż do wartości, którą użytkownik podał na wejściu.




User
Napisz mi teraz do tego kodu sprawozdanie, opisz najpierw co to ulamki fareya następnie w odniesieniu do kodu opisz jak działa i co go ogranicza ipt

ChatGPT
Oto sprawozdanie dotyczące sekwencji Fareya i analiza kodu w kontekście jej działania:

Sekwencja Fareya
Sekwencja Fareya to szczególna sekwencja ułamków, które mają mianowniki ograniczone do konkretnej liczby naturalnej. Każdy element sekwencji Fareya to nieskracalny ułamek, którego mianownik jest mniejszy lub równy określonej liczbie naturalnej. Sekwencja Fareya jest używana w matematyce, zwłaszcza w teorii liczb i analizie numerycznej, oraz w różnych dziedzinach fizyki i informatyki.

Analiza Kodu
Podałeś kod w języku C++, który generuje i wypisuje ułamki w sekwencji Fareya dla danego n. Przedstawmy analizę działania tego kodu krok po kroku:

Inicjalizacja zmiennych: Kod rozpoczyna się od deklaracji zmiennych f1 i f2, które reprezentują dwa ułamki początkowe. f1 ma licznik 0 i mianownik 1, a f2 ma licznik 1 i mianownik n. Wartość n jest pobierana od użytkownika.

Warunek wypisywania: Kod sprawdza, czy n nie przekracza 12. Jeśli tak, użytkownik jest proszony o podanie nowej wartości n.

Generowanie sekwencji Fareya: Następnie kod wchodzi do pętli for, która generuje sekwencję Fareya od 1 do n.

Obliczenia w funkcji farey: Funkcja farey jest wywoływana dla każdego i od 1 do n. Ta funkcja jest odpowiedzialna za obliczenia sekwencji Fareya.

a. Początkowe ułamki f1 i f2 są wypisywane na wyjście.

b. Następnie, w pętli while, generowane są kolejne ułamki Fareya, używając współczynnika k, który jest obliczany w oparciu o mianowniki f1 i f2.

c. Nowy ułamek f2 jest obliczany na podstawie współczynnika k i ułamka f1, przy zachowaniu nieskracalności ułamków.

d. Obliczony ułamek f2 jest wypisywany na wyjście.

Zakończenie programu: Program kończy się, gdy wszystkie ułamki Fareya dla wartości n zostały wygenerowane i wypisane.

Ograniczenia i uwagi
Ograniczenie mianownika: Sekwencja Fareya w tym kodzie jest generowana dla danego n, ale mianowniki ułamków są ograniczone do wartości n. To oznacza, że sekwencja jest skończona i uwzględnia tylko te ułamki, których mianowniki są mniejsze lub równe n.

Ograniczenie wartości n: W kodzie istnieje ograniczenie wartości n do maksymalnie 12. Jeśli użytkownik poda większą wartość, zostanie poproszony o podanie innej liczby. To ograniczenie wynika z praktycznych ograniczeń obliczeń numerycznych i wydajności.

Jasność i czytelność kodu: W celu zwiększenia czytelności kodu, zaleca się stosowanie odpowiednich komentarzy i nazw zmiennych oraz struktur. Warto też używać struktur do reprezentacji ułamków, co ułatwia zrozumienie kodu.

Wniosek: Kod generujący sekwencję Fareya jest przykładem implementacji matematycznego konceptu w języku programowania. Sekwencja Fareya jest używana w różnych dziedzinach matematyki i nauk ścisłych i ma zastosowania w teorii liczb, analizie numerycznej i innych obszarach. W kodzie zaimplementowano algorytm generowania ułamków sekwencji Fareya w sposób czytelny, z uwzględnieniem ograniczeń wartości n i mianowników.
