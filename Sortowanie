Sortowanie bąblekowe:
#include <iostream>

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    quickSort(arr, 0, n - 1);

    std::cout << "Posortowana tablica: ";
    for (int i = 0; i < n; i++) {
        std::cout << arr[i] << " ";
    }
    return 0;
}
Sortowanie szybkie:
#include <iostream>

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    quickSort(arr, 0, n - 1);

    std::cout << "Posortowana tablica: ";
    for (int i = 0; i < n; i++) {
        std::cout << arr[i] << " ";
    }
    return 0;
}
Cały :
#include <iostream>
#include <chrono>
#include <random>
#include <vector>

using namespace std;

void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr[i], arr[j]);
            }
        }

        swap(arr[i + 1], arr[high]);
        int pi = i + 1;

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    const int n = 10000; // Zwiększamy liczbę elementów w tablicy
    vector<int> arr(n);

    // Wypełniamy tablicę losowymi liczbami
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<int> dist(1, n);
    for (int i = 0; i < n; i++) {
        arr[i] = dist(gen);
    }

    // Pomiar czasu sortowania bąbelkowego
    auto startBubbleSort = chrono::high_resolution_clock::now();
    bubbleSort(arr);
    auto stopBubbleSort = chrono::high_resolution_clock::now();
    auto durationBubbleSort = chrono::duration_cast<chrono::milliseconds>(stopBubbleSort - startBubbleSort);

    cout << "Czas sortowania bąbelkowego: " << durationBubbleSort.count() << " milisekundy" << endl;

    // Resetujemy tablicę
    for (int i = 0; i < n; i++) {
        arr[i] = dist(gen);
    }

    // Pomiar czasu sortowania szybkiego
    auto startQuickSort = chrono::high_resolution_clock::now();
    quickSort(arr, 0, n - 1);
    auto stopQuickSort = chrono::high_resolution_clock::now();
    auto durationQuickSort = chrono::duration_cast<chrono::milliseconds>(stopQuickSort - startQuickSort);

    cout << "Czas sortowania szybkiego: " << durationQuickSort.count() << " milisekundy" << endl;

    return 0;
}
