#include <iostream>
using namespace std;

// Funkcja do znalezienia maksimum dwóch liczb całkowitych.
int max(int x, int y) {
   return (x > y) ? x : y;
}

// Funkcja rozwiązująca problem plecaka za pomocą dynamicznego programowania.
int plecak(int W, int w[], int v[], int n) {
   int i, wt;
   int K[n + 1][W + 1];  // Tworzenie tablicy K do przechowywania wyników.

   // Rozpoczęcie rozważania problemu plecaka.
   for (i = 0; i <= n; i++) {
      for (wt = 0; wt <= W; wt++) {
         if (i == 0 || wt == 0)
            K[i][wt] = 0;  // Wartość początkowa dla brzegowych przypadków.
         else if (w[i - 1] <= wt)
            K[i][wt] = max(v[i - 1] + K[i - 1][wt - w[i - 1]], K[i - 1][wt]);
            // Wybieramy maksimum spośród dwóch możliwości: wybranie i-tego przedmiotu lub nie.
         else
            K[i][wt] = K[i - 1][wt];
      }
   }
   return K[n][W];  // Zwracamy maksymalną wartość plecaka.
}

int main() {
   // Główna funkcja programu, obsługująca wprowadzanie danych, obliczenia z wykorzystaniem funkcji plecak
   // i wyświetlanie wyniku na ekranie.

   cout << "Podaj liczbę przedmiotów w plecaku:";
   int n, W;
   
   if (!(cin >> n) || n <= 0) {
      cout << "Błąd: Proszę podać dodatnią liczbę całkowitą większą od zera.";
      return 1;
   }
   
   int v[n], w[n];
   
   for (int i = 0; i < n; i++) {
      cout << "Podaj wartość i wagę dla przedmiotu " << i << ":";
      
      if (!(cin >> v[i]) || v[i] < 0) {
         cout << "Błąd: Proszę podać dodatnią liczbę całkowitą dla wartości.";
         return 1;
      }
      
      if (!(cin >> w[i]) || w[i] < 0) {
         cout << "Błąd: Proszę podać dodatnią liczbę całkowitą dla wagi.";
         return 1;
      }
   }
   
   cout << "Podaj pojemność plecaka";
   
   if (!(cin >> W) || W < 0) {
      cout << "Błąd: Proszę podać dodatnią liczbę całkowitą dla pojemności.";
      return 1;
   }
   
   cout << plecak(W, w, v, n);  // Wywołanie funkcji plecak i wyświetlenie wyniku.
   
   return 0;
}
